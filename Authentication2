//server.js
// server.js

const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const PORT = 5000;
const SECRET_KEY = 'mysecretkey';

// Hardcoded sample user
const sampleUser = {
  username: 'john',
  password: '12345', // In real apps, always hash passwords
};

// JWT verification middleware
const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer token

  if (!token) return res.sendStatus(401); // No token provided

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.sendStatus(403); // Invalid token
    req.user = decoded; // Attach decoded payload to request
    next();
  });
};

// Public route
app.get('/', (req, res) => {
  res.send('Public Route: No authentication required');
});

// Login route - issues JWT
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (username === sampleUser.username && password === sampleUser.password) {
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
    return res.json({ token });
  }

  return res.status(401).json({ message: 'Invalid credentials' });
});

// Protected route
app.get('/protected', verifyToken, (req, res) => {
  res.json({ message: `Hello ${req.user.username}, you have access to this protected route!` });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
