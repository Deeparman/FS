const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

// Use body-parser to parse JSON requests
app.use(bodyParser.json());

// Secret key for JWT signing
const JWT_SECRET = 'supersecretkey';

// Hardcoded user for demo
const USER = {
  username: 'user1',
  password: 'password123',
  balance: 1000 // initial balance
};


const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader) {
    return res.status(401).json({ error: 'Authorization header missing' });
  }

  const token = authHeader.split(' ')[1]; // Bearer <token>
  if (!token) {
    return res.status(401).json({ error: 'Token missing' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded; // attach decoded token to request
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Invalid or expired token' });
  }
};



// Login route - returns JWT token
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  if (username === USER.username && password === USER.password) {
    const token = jwt.sign({ username: USER.username }, JWT_SECRET, { expiresIn: '1h' });
    return res.json({ message: 'Login successful', token });
  } else {
    return res.status(401).json({ error: 'Invalid username or password' });
  }
});

// Protected route - View balance
app.get('/balance', verifyToken, (req, res) => {
  res.json({ balance: USER.balance });
});

// Protected route - Deposit money
app.post('/deposit', verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid deposit amount' });
  }
  USER.balance += amount;
  res.json({ message: `Deposited ${amount} successfully`, balance: USER.balance });
});

// Protected route - Withdraw money
app.post('/withdraw', verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid withdrawal amount' });
  }
  if (amount > USER.balance) {
    return res.status(400).json({ error: 'Insufficient balance' });
  }
  USER.balance -= amount;
  res.json({ message: `Withdrew ${amount} successfully`, balance: USER.balance });
});

// Start server
app.listen(PORT, () => {
  console.log(`Banking API running at http://localhost:${PORT}`);
});
